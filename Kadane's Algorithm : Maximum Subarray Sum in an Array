Problem Statement: Given an integer array arr, find the contiguous subarray (containing at least one number) which
has the largest sum and returns its sum and prints the subarray.
Example 1:
Input:
 arr = [-2,1,-3,4,-1,2,1,-5,4] 

Output:
 6 

Explanation:
 [4,-1,2,1] has the largest sum = 6. 


#include<bits/stdc++.h>
using namespace std;
int maxsubarraysum(int arr[],int n)
{
    int maxi=INT_MAX;//maximum sum
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=i;j<n;j++){
                //current subsarray = arr[i...j]
                //add the current element arr[j]
                //to the sum i.e, sum of arr[i...j-1]
                sum+=arr[j];
                maxi=max(maxi,sum);//getting the maximum
            }
        }
        return maxi;
}

int main()
{
int arr[] ={-2,1,-3,4,-1,2,1,-5,4};
int n=sizeof(arr)/sizeof(arr[0]);
int maxsum = maxsubarraysum(arr,n);
cout<<"the maximum subarray sum is"<<maxsum<<endl;
return 0;
}
